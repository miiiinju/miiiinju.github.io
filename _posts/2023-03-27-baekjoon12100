---
title:  "[구현,완전탐색] 백준 12100 2048 (Easy)"
excerpt: "백준 12100 2048 (Easy) - 구현,BFS "

categories:
  - BFS, 구현, 완전탐색
tags:
  - [BOJ, BFS, 구현, 완전탐색 ,JAVA]
---
# [[구현,BFS] 백준 12100 2048 (Easy) - JAVA](https://www.acmicpc.net/problem/12100)

BFS 문제들과 알고리즘은 거의 유사하지만, 4가지 방향의 구현을 따로 해주어야 해서 구현이 힘든 문제

## 처음 구상한 방법

현재 맵을 상, 하, 좌, 우로 움직일 수 있는 메서드를 만들고  
  
해당 메서드를 이용하여 BFS로 완전 탐색을 진행하여  
  
탐색 중 최대값이 갱신되면 max 값에 할당하여 주고  
  
BFS를 탐색하면서 문제 조건의 이동 횟수 제한이 5이므로 count가 5가되는 경우 Queue에 추가하지 않는다.  
  
전부 탐색이 끝나면 max값을 출력해주었다.  
  
- 문제 접근은 간단하지만, 세부 구현에서 디테일한 부분이 정말 많아서 어려웠다.  
  
### 구현

먼저, 현재 테이블의 상태를 저장할 수 있는 Phase 클래스를 만들어 주었다. 

~~~java
static class Phase {
		int[][] map = new int[n][n];
		int count = 0;

		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + Arrays.deepHashCode(map);
			return result;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj) {
				return true;
			}
			if (obj == null) {
				return false;
			}
			if (getClass() != obj.getClass()) {
				return false;
			}
			Phase other = (Phase) obj;
			return Arrays.deepEquals(map, other.map);
		}

		public Phase(int[][] ary, int count) {
			this.count = count;
			for (int i = 0; i < n; i++)
				for (int j = 0; j < n; j++)
					map[i][j] = ary[i][j];
		}

		public Phase(Phase o) {
			for (int i = 0; i < n; i++)
				for (int j = 0; j < n; j++)
					map[i][j] = o.map[i][j];
			this.count = o.count;
		}

	}
 ~~~

이후 HashSet을 사용하여 visited를 구현하여 hashCode()와 equals()함수를 함께 구현해주었다. 
  
### 상하좌우 이동 구현  
  
오른쪽으로 이동하는 경우에는 같은 한 행씩 옮겨주면서 진행했다.  
  
첫 번째 행의 가장 오른쪽 
  



#### 오른쪽으로 이동  
~~~java
// 오른쪽으로 이동
	public static Phase Move(Phase nowPhase) {
		Phase temp = new Phase(nowPhase);

		for (int i = 0; i < n; i++) {
			int index = n - 1;
			for (int prev_j = n - 1; prev_j >= 0;) {// prev_j는 처음거 prev는 한 칸 전에껄 검

				int now_j = prev_j;
				// now_j는 다음

				if (temp.map[i][prev_j] != 0) {
					while (now_j > 0 && temp.map[i][--now_j] == 0)
						;

					// 여기서 now_j는 0이 아닌 다른 칸을 가리키고

					if (now_j != prev_j) {
						if (temp.map[i][prev_j] == temp.map[i][now_j])// 일반적으로 같은 경우에는
						{
							if (max < temp.map[i][now_j] * 2)
								max = temp.map[i][now_j] * 2;
							int now = temp.map[i][prev_j]*2;
							temp.map[i][now_j] = 0;
							temp.map[i][prev_j]=0;
							temp.map[i][index--] = now;

						} else// 예를 들어 2와 8같이 다른 경우, 8을 검사
						{
							int now = temp.map[i][prev_j];
							
							temp.map[i][prev_j]=0;
							temp.map[i][index--] = now;

						}
					} 
					else// 0, 0이라서 while 안 돌고 같은 거면

					{
						int now = temp.map[i][now_j];
						temp.map[i][now_j] = 0;
						temp.map[i][index--] = now;
						now_j--;
					}
					prev_j = now_j;
				} else
					prev_j--;

			}
		}
		return temp;
	}
~~~


~~~java
Puzzle answer = new Puzzle();
answer.map[0]= new int[] {1,2,3};
answer.map[1]= new int[] {4,5,6};
answer.map[2]= new int[] {7,8,0};
~~~
  
먼저 목표하는 답의 Puzzle 상태를 미리 만들어두고, 이후
~~~java
if(answer.equals(other_Puzzle_instance))
{
  System.out.println(other_Puzzle_instance.count)
  return;
}
~~~
위 코드의 if조건을 만족하게 되는 순간 count를 출력하는 방법으로 구현하였다.  
  
BFS로 구현하기 위해 Queue를 만들어주었고,  
  
한 번 검사한 퍼즐의 상태는 다시 검사하지 않게 하기 위해 HashSet을 이용하였다.  
  
~~~java

~~~
  
  
## 핵심 동작  
  

## 코드  

~~~java

~~~  

## 생각  


  
